namespace ParsingResults.Tests.ProgressiveParsingResult;

public class HashCode
{
    private const string ErrorMessage = "ERROR: this isn't right";

    private static readonly string EmptyMessage = string.Empty;

    private const int FailedIndex = 5;

    private const int NegativeIndex = -87;

    private const int TestZero = 0;

    private const int TestOne = 1;

    private const int TestNegativeOne = -1;

    [Fact]
    public void Success_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();


        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void Success_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Success_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Success_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]

    public void Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/ /*[Fact]
    public void Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/ /*[Fact]
    public void Failure_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestNegativeOne_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    /*[Fact]
public void Failure_WithTestNegativeOne_Default_And_Success_AndEmptyMessage_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Success_AndEmptyMessage_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}*/
    /*[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestZero_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestZero_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestZero_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestZero_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestZero_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestZero_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Success_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Success_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}
    [Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}
    [Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Success_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Success_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}
    [Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}
    [Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.Equal(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}

[Fact]
public void Failure_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
{
ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);
ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);

int leftHashCode = left.GetHashCode();
int rightHashCode = right.GetHashCode();

Assert.NotEqual(leftHashCode, rightHashCode);
}*/
    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Failure_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }
            [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }
            [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }
            [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }
            [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }
            [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }
            [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Failure_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void Custom_WithNegativeIndex_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithNegativeIndex_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestZero_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_Default_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_FailedIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateSuccess(FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Success_AndEmptyMessage_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult
                .CreateSuccess(NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateFailure(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    } /*[Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Failure_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left = ParsingResults.ProgressiveParsingResult.CreateCustom(TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right = ParsingResults.ProgressiveParsingResult.CreateFailure(TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }*/

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_Default()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_FailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_NegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, ErrorMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithNegativeIndex_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(NegativeIndex,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestZero_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestZero,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(TestOne,
                EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageDefault()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, -2);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageFailedIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, FailedIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.NotEqual(leftHashCode, rightHashCode);
    }

    [Fact]
    public void
        Custom_WithTestNegativeOne_AndEmptyMessage_NegativeIndex_And_Custom_WithTestNegativeOne_AndEmptyMessageNegativeIndex()
    {
        ParsingResults.ProgressiveParsingResult left =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);
        ParsingResults.ProgressiveParsingResult right =
            ParsingResults.ProgressiveParsingResult.CreateCustom(
                TestNegativeOne, EmptyMessage, NegativeIndex);

        int leftHashCode = left.GetHashCode();
        int rightHashCode = right.GetHashCode();

        Assert.Equal(leftHashCode, rightHashCode);
    }
}