name: Publish to NuGet

on:
  workflow_run:
    workflows: [ "Build & Test" ]
    types: [ completed ]

concurrency:
  group: nuget-${{ github.ref }}
  cancel-in-progress: false
  
run-name: Publish to NuGet if necessary

jobs:
  publish:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Download git reference data
        uses: actions/cache@v4
        with:
          path: github_refs.wd
          key: push-reference
      
      - name: Extract git reference data
        id: git-data
        run: |
          if [ ! -f "github_refs.wd" ]; then
            echo "The file ${GITHUB_WORKSPACE}/github_refs.wd does not exist"
            exit 1
          fi
          
          GIT_REFERENCE=$(sed -n '1p' github_refs.wd)  # Read the first line (git reference) into the variable 'GIT_REFERENCE'
          GIT_TAG=$(sed -n '2p' github_refs.wd)  # Read the second line (tag if present) into the variable 'tag'
          
          # Optionally, export the variables so they are accessible outside the script
          echo "GIT_REFERENCE=${GIT_REFERENCE}" >> "$GITHUB_ENV"
          echo "GIT_TAG=${GIT_TAG}" >> "$GITHUB_ENV"
        shell: bash
        
      - name: Validate tag format
        run: |
          TAG_NAME="${{ env.GIT_TAG }}"
          if [[ -z "$TAG_NAME" ]]; then
            echo "No tag found. Skipping publish."
            exit 78
          elif [ "No tag" -eq "$TAG_NAME" ]; then
            echo "No tag found. Skipping publish."
            exit 78
          elif [[ ! "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag format invalid: $TAG_NAME. Skipping publish."
            exit 78
          fi
          
          echo "Valid tag: $TAG_NAME"
        shell: bash
        
      - name: Checkout specific reference
        run: git fetch origin $GIT_REFERENCE && git checkout $GIT_REFERENCE
        env:
          GIT_REFERENCE: ${{ env.GIT_REFERENCE }}
          
      - name: Determine highest .NET version
        id: highest-dotnet
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/nuget/extract-highest-version.sh"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.highest-dotnet.outputs.DOTNET_VERSION }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.SOFTOMNI_NUGET_KEY }}

      - name: Pack
        run: dotnet pack --configuration Release --output ./artifacts

      - name: Publish
        run: dotnet nuget push ./artifacts/*.nupkg \
          --api-key ${{ secrets.SOFTOMNI_NUGET_KEY }} \
          --source https://api.nuget.org/v3/index.json
