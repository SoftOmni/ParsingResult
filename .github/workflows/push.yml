name: Build & Test

on:
  push:
    branches:
      - "*"

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      highest: ${{ steps.set-matrix.outputs.highest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate .NET versions matrix and determine highest version
        id: set-matrix
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/push/set-matrix.sh"

  generate-test-matrix:
    runs-on: ubuntu-latest
    needs: generate-matrix
    outputs:
      test-matrix: ${{ steps.set-test-matrix.outputs.test-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate test matrix with projects and frameworks
        id: set-test-matrix
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/push/generate-project-matrix.sh" "${GITHUB_WORKSPACE}" '${{ needs.generate-matrix.outputs.matrix }}'

      - name: Debug test-matrix output
        run: |
          echo "Generated Matrix: ${{ steps.set-test-matrix.outputs.test-matrix }}"
        shell: bash


  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine .NET SDK version for build (highest)
        id: sdk-version-build
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/push/set-dotnet-version-for-build.sh" ${{ needs.generate-matrix.outputs.highest }}

      - name: Setup .NET for build
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.sdk-version-build.outputs.sdk_version }}

      - name: Set VERSION variable from tag or commit
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/push/set-version-tag.sh"

      - name: Build solution using highest .NET version
        run: dotnet build --configuration Release /p:Version=${{ env.VERSION }}
        shell: bash

  test:
    needs: [generate-test-matrix, build]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.test-matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine .NET SDK version for testing
        id: sdk-version-test
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/push/set-dotnet-version-for-tests.sh" "${{ matrix.dotnet_version }}"

      - name: Setup .NET for test
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.sdk-version-test.outputs.sdk_version }}

      - name: Set VERSION variable from tag or commit
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/push/set-version-tag-for-tests.sh"

      - name: Setup directory for tests
        run: bash "${GITHUB_WORKSPACE}/.github/workflows/scripts/push/setup-directory.sh" "${{ matrix.dotnet_version }}" "${GITHUB_WORKSPACE}"

      - name: Run tests
        run: dotnet test "${{ matrix.test_project }}" --configuration Release \
          --framework ${{ matrix.dotnet_version }} \
          --logger "test_results/${{ matrix.dotnet_version }}/test_results.trx" \
          --no-build

      - name: debug tree
        run: tree

      - name: Publish test results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.dotnet_version }}
          path: "test_results/${{ matrix.dotnet_version }}/*.trx"

      - name: Report test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: .NET Tests (${{ matrix.dotnet_version }})
          path: "test_results/${{ matrix.dotnet_version }}/*.trx"
          reporter: dotnet-trx
