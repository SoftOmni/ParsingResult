name: Build & Test

on:
  push:
    branches:
      - "*"

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      highest: ${{ steps.set-matrix.outputs.highest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate .NET versions matrix and determine highest version
        id: set-matrix
        run: |
          #!/bin/bash
          set -e
          SCRIPT_PATH=$(pwd)
          
          # Find all .csproj files in the repository
          PROJECT_FILES=$(find "$SCRIPT_PATH" -type f -name "*.csproj")
          
          # Initialize an array to store target frameworks
          VERSIONS=()
          
          for PROJECT_FILE in $PROJECT_FILES; do
            # Extract a single target framework if available
            TARGET=$(grep -oPm1 "(?<=<TargetFramework>)(.*)(?=</TargetFramework>)" "$PROJECT_FILE" || true)
            if [ -n "$TARGET" ]; then
              VERSIONS+=("$TARGET")
            fi
            # Extract multiple target frameworks if available
            MULTI=$(grep -oPm1 "(?<=<TargetFrameworks>)(.*)(?=</TargetFrameworks>)" "$PROJECT_FILE" || true)
            if [ -n "$MULTI" ]; then
              IFS=';' read -ra FRAMEWORKS <<< "$MULTI"
              for f in "${FRAMEWORKS[@]}"; do
                VERSIONS+=("$f")
              done
            fi
          done
          
          # Remove duplicate entries and sort them (one per line)
          UNIQUE_VERSIONS=($(printf "%s\n" "${VERSIONS[@]}" | sort -u))
          
          if [ ${#UNIQUE_VERSIONS[@]} -eq 0 ]; then
            echo "No .NET versions found in projects."
            MATRIX_JSON="{\"dotnet_version\": []}"
            HIGHEST_VERSION=""
          else
            # Build a JSON array from the unique versions (e.g. "net6.0", "net7.0")
            JSON_ARRAY=$(printf '"%s",' "${UNIQUE_VERSIONS[@]}")
            JSON_ARRAY="[${JSON_ARRAY%,}]"
            MATRIX_JSON="{\"dotnet_version\": $JSON_ARRAY}"
          
            # Determine the highest version by removing the "net" prefix,
            # sorting numerically in reverse, then re-adding the "net" prefix.
            HIGHEST_NUM=$(printf "%s\n" "${UNIQUE_VERSIONS[@]}" | sed 's/^net//' | sort -rV | head -n 1)
            HIGHEST_VERSION="net${HIGHEST_NUM}"
          fi
          
          echo "Matrix: $MATRIX_JSON"
          echo "Highest version: $HIGHEST_VERSION"
          echo "::set-output name=matrix::$MATRIX_JSON"
          echo "::set-output name=highest::$HIGHEST_VERSION"
        shell: bash

  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine .NET SDK version for build (highest)
        id: sdk-version-build
        run: |
          # Strip "net" and append ".x" (e.g. "net7.0" -> "7.0.x")
          sdk_version=$(echo "${{ needs.generate-matrix.outputs.highest }}" | sed 's/^net//').x
          echo "Calculated .NET SDK version for build: $sdk_version"
          echo "::set-output name=sdk_version::$sdk_version"
        shell: bash

      - name: Setup .NET for build
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.sdk-version-build.outputs.sdk_version }}

      - name: Set VERSION variable from tag or commit
        run: |
          set -e
          git fetch --tags
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null) || true
          if [[ -n "$TAG" && "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$TAG
          else
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION="0.0.0-$COMMIT_HASH"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build solution using highest .NET version
        run: dotnet build --configuration Release /p:Version=${{ env.VERSION }}

  test:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine .NET SDK version for testing
        id: sdk-version-test
        run: |
          # Strip "net" and append ".x" (e.g. "net6.0" -> "6.0.x")
          sdk_version=$(echo "${{ matrix.dotnet_version }}" | sed 's/^net//').x
          echo "Calculated .NET SDK version for test: $sdk_version"
          echo "::set-output name=sdk_version::$sdk_version"
        shell: bash

      - name: Setup .NET for test
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ steps.sdk-version-test.outputs.sdk_version }}

      - name: Set VERSION variable from tag or commit
        run: |
          set -e
          git fetch --tags
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null) || true
          if [[ -n "$TAG" && "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$TAG
          else
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION="0.0.0-$COMMIT_HASH"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Run tests using target framework ${{ matrix.dotnet_version }}
        run: |
          # Explicitly specify the test project to avoid test runner issues.
          dotnet test ./tests/MyTestProject.csproj --configuration Release /p:Version=${{ env.VERSION }} --logger "trx;LogFileName=test_results_${{ matrix.dotnet_version }}.trx" --no-build
        shell: bash

      - name: Publish test results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.dotnet_version }}
          path: "**/TestResults/*.trx"

      - name: Report test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: .NET Tests (${{ matrix.dotnet_version }})
          path: "**/TestResults/*.trx"
          reporter: dotnet-trx
