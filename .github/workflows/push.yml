name: Build & Test

on:
  push:
    branches:
      - "*"

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate .NET versions matrix
        id: set-matrix
        run: |
          #!/bin/bash
          set -e
          SCRIPT_PATH=$(pwd)
          
          # Find all .csproj files
          PROJECT_FILES=$(find "$SCRIPT_PATH" -type f -name "*.csproj")
          
          # Initialize an array to store target frameworks
          VERSIONS=()
          
          for PROJECT_FILE in $PROJECT_FILES; do
            # Extract a single target framework
            TARGET=$(grep -oPm1 "(?<=<TargetFramework>)(.*)(?=</TargetFramework>)" "$PROJECT_FILE")
            if [ -n "$TARGET" ]; then
              VERSIONS+=("$TARGET")
            fi
            # Extract multiple target frameworks if available
            MULTI=$(grep -oPm1 "(?<=<TargetFrameworks>)(.*)(?=</TargetFrameworks>)" "$PROJECT_FILE")
            if [ -n "$MULTI" ]; then
              IFS=';' read -ra FRAMEWORKS <<< "$MULTI"
              for f in "${FRAMEWORKS[@]}"; do
                VERSIONS+=("$f")
              done
            fi
          done
          
          # Remove duplicate entries and sort
          UNIQUE_VERSIONS=($(echo "${VERSIONS[@]}" | tr ' ' '\n' | sort -u))
          
          if [ ${#UNIQUE_VERSIONS[@]} -eq 0 ]; then
            echo "No .NET versions found in projects."
            MATRIX_JSON="{\"dotnet_version\": []}"
          else
            # Build a JSON array from the unique versions (e.g. "net6.0", "net7.0")
            JSON_ARRAY=$(printf '"%s",' "${UNIQUE_VERSIONS[@]}")
            JSON_ARRAY="[${JSON_ARRAY%,}]"
            MATRIX_JSON="{\"dotnet_version\": $JSON_ARRAY}"
          fi
          
          echo "Matrix: $MATRIX_JSON"
          # Set the output (using the legacy syntax; see GitHubâ€™s docs for migrating to $GITHUB_OUTPUT)
          echo "::set-output name=matrix::$MATRIX_JSON"

  build-and-test:
    needs: generate-matrix
    runs-on: ubuntu-latest
    # Use the generated matrix. Each job run will have a different "matrix.dotnet_version" value.
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          # Convert a target framework (e.g. "net7.0") into a .NET SDK version (e.g. "7.0.x")
          dotnet-version: ${{ format('{0}.x', replace(matrix.dotnet_version, 'net', '')) }}

      - name: Set VERSION variable from tag or commit
        run: |
          set -e
          git fetch --tags
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null) || true
          if [[ -n "$TAG" && "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$TAG
          else
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION="0.0.0-$COMMIT_HASH"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build
        run: dotnet build --configuration Release /p:Version=${{ env.VERSION }}

      - name: Test
        run: dotnet test --configuration Release /p:Version=${{ env.VERSION }} \
          --logger "trx;LogFileName=test_results.trx" --no-build

      - name: Publish test results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/TestResults/*.trx"

      - name: Report test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: .NET Tests
          path: "**/TestResults/*.trx"
          reporter: dotnet-trx
